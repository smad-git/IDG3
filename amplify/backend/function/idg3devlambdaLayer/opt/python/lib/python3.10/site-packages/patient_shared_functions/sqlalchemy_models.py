from sqlalchemy import Column, Integer, String, Date, ForeignKey, TIMESTAMP
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Patient(Base):
    __tablename__ = 'patients'

    id = Column(Integer, primary_key=True, autoincrement=True)
    email = Column(String(255), unique=True, nullable=False)
    first_name = Column(String(255), nullable=False)
    last_name = Column(String(255), nullable=False)
    date_of_birth = Column(Date, nullable=False)
    gender = Column(String(10), nullable=False)
    race = Column(String(100), nullable=False)
    address = Column(String, nullable=True)
    status = Column(String(50), nullable=False)
    created_at = Column(TIMESTAMP, nullable=False, server_default='CURRENT_TIMESTAMP')

    # Relationships
    encounters = relationship("Encounter", back_populates="patient")

class Encounter(Base):
    __tablename__ = 'encounters'

    id = Column(Integer, primary_key=True, autoincrement=True)
    patient_id = Column(Integer, ForeignKey('patients.id'), nullable=False)
    encounter_date = Column(TIMESTAMP, nullable=False)
    reason = Column(String(255), nullable=True)
    created_at = Column(TIMESTAMP, nullable=False, server_default='CURRENT_TIMESTAMP')

    # Relationships
    patient = relationship("Patient", back_populates="encounters")
    conditions = relationship("Condition", back_populates="encounter")
    medications = relationship("Medication", back_populates="encounter")

class Condition(Base):
    __tablename__ = 'conditions'

    id = Column(Integer, primary_key=True, autoincrement=True)
    encounter_id = Column(Integer, ForeignKey('encounters.id'), nullable=False)
    condition_code = Column(String(50), nullable=True)
    diagnosed_at = Column(TIMESTAMP, nullable=False)

    # Relationships
    encounter = relationship("Encounter", back_populates="conditions")
    medications = relationship("ConditionMedication", back_populates="condition")

class Medication(Base):
    __tablename__ = 'medications'

    id = Column(Integer, primary_key=True, autoincrement=True)
    encounter_id = Column(Integer, ForeignKey('encounters.id'), nullable=False)
    medication_name = Column(String(255), nullable=True)
    dosage = Column(String(500), nullable=True)
    start_date = Column(TIMESTAMP, nullable=True)
    end_date = Column(TIMESTAMP, nullable=True)

    # Relationships
    encounter = relationship("Encounter", back_populates="medications")
    conditions = relationship("ConditionMedication", back_populates="medication")

class ConditionMedication(Base):
    __tablename__ = 'conditions_medications'

    condition_id = Column(Integer, ForeignKey('conditions.id'), primary_key=True)
    medication_id = Column(Integer, ForeignKey('medications.id'), primary_key=True)

    # Relationships
    condition = relationship("Condition", back_populates="medications")
    medication = relationship("Medication", back_populates="conditions")

