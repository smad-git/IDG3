import psycopg2
import boto3
import logging
from psycopg2.pool import SimpleConnectionPool
from botocore.exceptions import ClientError

# Configure logging
logging.basicConfig(level=logging.INFO)  # You can adjust the level to DEBUG for more detailed logs
logger = logging.getLogger(__name__)

class DatabaseConnectionPool:
    def __init__(self):
        logger.info("Initializing DatabaseConnectionPool123")
        self.connection_pool = self.create_pool()

    def create_pool(self):
        logger.info("Creating connection pool1")
        # Create a session to interact with SSM
        ssm = boto3.client('ssm')

        # Retrieve database credentials from SSM
        # Add DB credentials from secrets
        db_user = self.get_parameter(ssm, '/IDG3dev/rds/user')
        db_password = self.get_parameter(ssm, '/IDG3dev/rds/password')
        db_host = self.get_parameter(ssm, '/IDG3dev/rds/host')
        db_port = self.get_parameter(ssm, '/IDG3dev/rds/port', 5432)
        db_name = self.get_parameter(ssm, '/IDG3dev/rds/dbname', 'postgres')

        logger.info("Database credentials retrieved successfully")

        try:
            pool = SimpleConnectionPool(
                1,  # minconn
                10,  # maxconn
                user=db_user,
                password=db_password,
                host=db_host,
                port=db_port,
                database=db_name
            )
            logger.info("Connection pool created successfully")
            return pool
        except Exception as e:
            logger.error("Failed to create connection pool: %s", e)
            raise

    def get_parameter(self, ssm, name, default=None):
        logger.debug("Retrieving parameter: %s", name)
        try:
            response = ssm.get_parameter(Name=name, WithDecryption=True)
            value = response['Parameter']['Value']
            logger.debug("Parameter retrieved: %s", value)
            return value
        except ssm.exceptions.ParameterNotFound:
            logger.warning("Parameter not found: %s, returning default: %s", name, default)
            return default
        except Exception as e:
            logger.error("Error retrieving parameter %s: %s", name, e)
            return default
        
    def get_secret():
        secret_name = "rds!db-bc00922a-2161-4261-8cc6-da66be99256d"
        region_name = "us-east-1"

        # Create a Secrets Manager client
        session = boto3.session.Session()
        client = session.client(
            service_name='secretsmanager',
            region_name=region_name
        )

        try:
            get_secret_value_response = client.get_secret_value(
                SecretId=secret_name
            )
        except ClientError as e:
            raise e

        return get_secret_value_response['SecretString']

    def get_connection(self):
        logger.debug("Getting connection from pool")
        conn = self.connection_pool.getconn()
        logger.info("Connection obtained from pool")
        return conn

    def return_connection(self, conn):
        logger.debug("Returning connection to pool")
        self.connection_pool.putconn(conn)
        logger.info("Connection returned to pool..")
